@model app.Models.User

@{
    ViewData["Title"] = "Users";
}

<div class="container-fluid d-flex flex-column vh-100">
    <!-- Header -->
    <header class="bg-primary text-white text-center py-3">
        <h1 class="display-5">User Profile</h1>
    </header>
    <input type="hidden" id="loggedInUserId" value="@ViewData["UserId"]">

    <!-- Main Content -->
    <main class="flex-grow-1 overflow-auto py-4">
        <div class="container profile-container">
            <div class="row">
                <!-- User Details Section -->
                <div class="col-12 col-lg-6 mb-4">
                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Username:</label>
                        <p class="form-control-plaintext">@Model.Username</p>
                    </div>

                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Full Name:</label>
                        <p class="form-control-plaintext">@Model.FullName</p>
                    </div>

                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Bio:</label>
                        <p class="form-control-plaintext">@Model.Bio</p>
                    </div>
                </div>

                <!-- Profile Picture Section -->
                <div class="col-12 col-lg-6 text-center mb-4">
                    <div class="profile-details">
                        <label class="form-label fw-bold">Profile Picture:</label>
                        @if (string.IsNullOrEmpty(Model.ProfilePicture))
                        {
                            <p class="form-control-plaintext">No profile picture available.</p>
                        }
                        else
                        {
                            <img src="@Model.ProfilePicture" alt="Profile Picture" class="img-thumbnail profile-img" />
                        }
                    </div>
                </div>
            </div>

            <!-- Buttons -->
            

            <div class="row">
                <!-- Friends List -->
                <div class="col-12 col-md-6 mb-4">
                    <div class="friends-list">
                        <label class="form-label fw-bold">Friends:</label>
                        <ul class="list-group">
                            @foreach (var friend in Model.prijatelji ?? new List<User>())
                            {
                                <li class="list-group-item">@friend.FullName</li>
                            }
                        </ul>
                    </div>
                </div>

                <!-- Posts List -->
                <div class="col-12 col-md-6">
                    <div class="posts-list">
                        <label class="form-label fw-bold">Posts:</label>
                        <ul class="list-group" id="postList">
                            <!-- Posts will be dynamically loaded here -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </main>


    <!-- Footer -->
    <footer class="bg-dark text-white text-center py-3 mt-auto">
        <p class="mb-0">&copy; 2025 User Profile Page</p>
    </footer>
</div>


<!-- Modal for adding a comment -->
<div class="modal fade" id="addCommentModal" tabindex="-1" aria-labelledby="addCommentModalLabel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCommentModalLabel">Add Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="handleModalClose()"></button>
            </div>
            <div class="modal-body">
                <form id="addCommentForm">
                    <div class="mb-3">
                        <label for="commentContent" class="form-label">Comment</label>
                        <textarea class="form-control" id="commentContent" rows="3" required></textarea>
                    </div>
                    <input type="hidden" id="commentPostId" />
                    <input type="hidden" id="commentAuthorUserId" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitComment()">Add Comment</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal za ažuriranje profila -->
<div class="modal fade" id="updateProfileModal" tabindex="-1" aria-labelledby="updateProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateProfileModalLabel">Update Profile</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updateProfileForm" method="put" enctype="multipart/form-data" action="/UpdateUser/@Model.UserId">
                    <div class="mb-3">
                        <label for="bio" class="form-label">Bio</label>
                        <textarea class="form-control" id="bio" name="bio" rows="3">@Model.Bio</textarea>
                    </div>
                    <div class="mb-3">
                        <label for="profilePicture" class="form-label">Profile Picture</label>
                        @if (!string.IsNullOrEmpty(Model.ProfilePicture))
                        {
                            <img src="@Model.ProfilePicture" alt="Profile Picture" class="img-thumbnail mb-2" width="150" />
                        }
                        <input type="file" class="form-control" id="profilePicture" name="profilePicture" value="@Model.ProfilePicture" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" onclick="updateProfile()">Update</button>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="loggedInUserId" value="@ViewData["UserId"]">

<script>

    // Open the modal for user deletion
    function openDeleteUserModal() {
        const userId = '@Model.UserId'; // Replace with the correct Razor variable for the user ID
        fetch(`/User/${userId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Redirect to login or homepage after logout and deletion
                    window.location.href = '/Account/Login';
                    alert("Deleted!");
                } else {
                    alert("Failed to delete user: " + data.error);
                }
            })
            .catch(error => {
                console.error("Error deleting user:", error);
            });

    }
    function updateProfile() {
        // Pronađi formu
        const form = document.getElementById("updateProfileForm");

        // Prikupljanje podataka iz forme
        const formData = new FormData(form);

        // Ispisivanje sadržaja formData za debugovanje
        for (let pair of formData.entries()) {
            console.log(pair[0] + ': ' + pair[1]);
        }

        // Slanje PUT zahteva sa formData
        const userId = "@Model.UserId";  // Zameniti sa stvarnim ID-jem
        fetch('/User/UpdateUser/' + userId, {
            method: 'PUT',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.message === "User updated successfully") {
                    // Ako je ažuriranje uspešno, zatvori modal i osveži korisničke podatke
                    $('#updateProfileModal').modal('hide');
                    alert('Profile updated successfully!');
                    location.reload();  // Osvežava stranicu
                } else {
                    alert('Error updating profile: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('There was an error updating your profile.');
            });
    }

    function openCommentModal(postId, authorUserId) {
        // Postavite postId i authorUserId u skrivena polja
        document.getElementById("commentPostId").value = postId;

        document.getElementById("commentAuthorUserId").value = authorUserId;

        // Prikazivanje modala koristeći Bootstrap API
        const addCommentModal = new bootstrap.Modal(document.getElementById("addCommentModal"));
        addCommentModal.show();

        // Onemogući interakciju sa pozadinom
        document.querySelector('.modal-backdrop').style.pointerEvents = 'none';
    }

    // Funkcija za slanje komentara na server
    async function submitComment() {
        const postId = document.getElementById("commentPostId").value;
        const content = document.getElementById("commentContent").value;

       const authorUserId = document.getElementById("commentAuthorUserId").value;
        console.log("Comment content: ", content);  // Dodaj ovu liniju

        // Provera da li je komentar unet
        if (!content.trim()) {
            alert("Content cannot be empty.");
            return;
        }

        // Podaci koji će biti poslati na server
        const commentData = {
            CommentId: "1",  // Dodajte ovu liniju ako je potrebna

            Content: content,
            Author: {
                UserId: authorUserId,
                ProfilePicture: ""
            },
            Post: { postId: postId }
        };
        console.log(commentData);

        try {
            // Slanje POST zahteva na server
            const response = await fetch('/Comment/AddComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(commentData)
            });

            const result = await response.json();
            console.log(result);  // Ispisivanje odgovora servera

            if (response.ok) {
                alert("Comment added successfully.");
                // Zatvorite modal nakon uspešnog dodavanja
                const addCommentModal = bootstrap.Modal.getInstance(document.getElementById("addCommentModal"));
                addCommentModal.hide();
                loadComments(postId);  // Ova funkcija treba da učita nove komentare za post
            } else {
                alert(`Error: ${result.Message}`);
            }
        } catch (error) {
            console.error("Error adding comment:", error);
            alert("An error occurred while adding the comment.");
        }
    }



    async function searchUsers() {
        const query = document.getElementById("searchBar").value;

        if (query.length === 0) {
            document.getElementById("userList").style.display = "none";
            return;
        }

        const response = await fetch(`/User/SearchUsernames?query=${query}`);
        const usernames = await response.json();

        const userList = document.getElementById("userList");
        userList.innerHTML = '';

        if (usernames.length > 0) {
            userList.style.display = "block";

            usernames.forEach(username => {
                const listItem = document.createElement("li");
                listItem.classList.add("list-group-item");
                listItem.textContent = username;

                // Redirektuj na stranicu korisnika kada se klikne na njegovo ime
                listItem.addEventListener('click', () => {
                    window.location.href = `/User/Users/${username}`;
                });

                userList.appendChild(listItem);
            });
        } else {
            userList.style.display = "none";
        }
    }

    function submitPost(event) {
        event.preventDefault(); // Prevent the default form behavior

        const form = document.getElementById("addPostForm");
        const formData = new FormData(form);

        fetch(form.action, {
            method: "POST",
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close the modal
                    const addPostModal = document.getElementById("addPostModal");
                    const modalInstance = bootstrap.Modal.getInstance(addPostModal);
                    modalInstance.hide();
                    loadPosts(); // Reload posts
                } else {
                    alert("Failed to add post: " + data.error);
                }
            })
            .catch(error => {
                console.error("Error submitting post:", error);
            });
    }

    async function loadPosts() {
        const userId = '@Model.UserId'; // Zamenite dinamičkim vrednostima ukoliko nije u razor syntax-u
        try {
            const response = await fetch(`/PostController/GetPosts?userId=${userId}`);
            const posts = await response.json();

            const postList = document.getElementById("postList");
            postList.innerHTML = ''; // Očistite postojeći sadržaj

            if (posts.length === 0) {
                postList.innerHTML = "<li class='list-group-item'>No posts available.</li>";
                return;
            }

            for (const post of posts) {
                const listItem = document.createElement("li");
                listItem.classList.add("list-group-item");
                listItem.innerHTML = `
                            <strong>${post.caption}</strong><br/>
                            <img src="${post.imageURL}" alt="Post Image" class="img-thumbnail post-img" />
                            <div class="d-flex justify-content-between mt-2">
                                <button
                                    class="heart-button btn-sm"
                                    id="likeButton-${post.postId}"
                                    onclick="likePost('${post.postId}')">
                                    &#9829; <!-- Unicode za srce -->
                                </button>
                                <button class="btn btn-danger btn-sm" id="unlikeButton-${post.postId}" onclick="unlikePost('${post.postId}')" style="display: none;">Unlike</button>
                                <button class="btn btn-primary btn-sm" onclick="openCommentModal('${post.postId}', '${post.author}')">Comment</button>
                                <span id="likeCount-${post.postId}">${post.likeCount}</span> Likes
                            </div>
                            <div id="commentsSection-${post.postId}" class="comments-section">
                                Loading comments...
                            </div>
                        `;
                postList.appendChild(listItem);

                // Pozivanje funkcije za učitavanje komentara nakon što post bude prikazan
                await loadComments(post.postId);
            }
        } catch (error) {
            console.error("Error fetching posts:", error);
        }
    }

    async function loadComments(postId) {
        try {
            if (!postId) {
                console.error("Invalid postId:", postId);
                alert("Invalid post ID.");
                return;
            }

            console.log("Fetching comments for postId:", postId);
            const response = await fetch(`/Comment/GetComments/${postId}`);

            const rawResponse = await response.clone().text();
            console.log("Raw response body:", rawResponse);

            let comments;
            try {
                comments = JSON.parse(rawResponse);
            } catch (parseError) {
                console.error("Failed to parse response as JSON:", parseError);
                alert("Failed to load comments.");
                return;
            }

            console.log("Fetched comments:", comments);

            const commentsSection = document.getElementById(`commentsSection-${postId}`);
            if (!commentsSection) {
                console.error(`Comments section not found for postId: ${postId}`);
                return;
            }

            commentsSection.innerHTML = ''; // Očistite postojeće komentare

            // Proverite da li `comments` nije niz ili je prazan
            if (!Array.isArray(comments) || comments.length === 0) {
                const noCommentsMessage = document.createElement("div");
                noCommentsMessage.classList.add("no-comments");
                noCommentsMessage.textContent = "Nema komentara još.";
                commentsSection.appendChild(noCommentsMessage);
                return;
            }

            // Prikaži komentare ako postoje
            comments.forEach(comment => {
                const commentElement = document.createElement("div");
                commentElement.classList.add("comment");
                commentElement.innerHTML = `
                            <p><strong>${comment.authorName}</strong>: ${comment.content}</p>
                            <small>${new Date(comment.createdAt).toLocaleString()}</small>
                        `;
                commentsSection.appendChild(commentElement);
            });
        } catch (error) {
            console.error("Error loading comments:", error);
            const commentsSection = document.getElementById(`commentsSection-${postId}`);
            if (commentsSection) {
                commentsSection.innerHTML = '<div class="error-message">Greška prilikom učitavanja komentara.</div>';
            }
        }
    }



    function updatePost(postId) {
        // Dohvati podatke o postu sa servera
        fetch(`/PostController/${postId}`)
            .then(response => response.json())
            .then(post => {
                // Popunite modal sa postojećim podacima
                document.getElementById('updateCaption').value = post.caption;
                document.getElementById('updateImage').value = post.imageURL;

                // Prikazivanje modala
                const updatePostModal = new bootstrap.Modal(document.getElementById('updatePostModal'));
                updatePostModal.show();

                // Dodavanje event listener-a za submit forme
                document.getElementById('updatePostForm').onsubmit = function (event) {
                    submitUpdatePost(event, postId);
                };
            })
            .catch(error => {
                console.error("Error fetching post:", error);
            });
    }


    function submitUpdatePost(event, postId) {
        event.preventDefault(); // Sprečava podrazumevani submit forme

        const updatedPost = {
            caption: document.getElementById('updateCaption').value,
            imageURL: document.getElementById('updateImage').value
        };

        // Slanje PUT zahteva za ažuriranje postojećeg posta
        fetch(`/PostController/${postId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedPost)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Zatvori modal nakon uspešnog ažuriranja
                    const updatePostModalElement = document.getElementById('updatePostModal');

                    if (updatePostModalElement) {
                        // Ako element postoji, inicijalizuj modal
                        const updatePostModal = new bootstrap.Modal(updatePostModalElement);
                        updatePostModal.hide(); // Zatvori modal
                    } else {
                        console.error('Element sa ID-jem "updatePostModal" nije pronađen!');
                    }
                    loadPosts(); // Reload posts after update
                } else {
                    alert("Failed to update post: " + data.error);
                }
            })
            .catch(error => {
                console.error("Error updating post:", error);
                alert("An error occurred while updating the post.");
            });
    }

    let postToDelete = null; // Globalna varijabla za čuvanje ID-ja posta koji treba da se obriše

    // Funkcija koja prikazuje modal za potvrdu brisanja
    function confirmDelete(postId) {
        postToDelete = postId; // Zapamti ID posta koji treba obrisati
        const deletePostModal = new bootstrap.Modal(document.getElementById('deletePostModal'));
        deletePostModal.show(); // Prikazivanje modala
    }

    // Funkcija za brisanje posta
    function deletePost() {
        if (postToDelete !== null) {
            fetch(`/PostController/${postToDelete}`, { method: "DELETE" })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadPosts(); // Ponovo učitaj postove nakon brisanja
                        const deletePostModal = bootstrap.Modal.getInstance(document.getElementById('deletePostModal'));
                        deletePostModal.hide(); // Zatvori modal
                    } else {
                        alert("Failed to delete post: " + data.error);
                    }
                })
                .catch(error => {
                    console.error("Error deleting post:", error);
                });
        }
    }

    // Dodaj event listener na dugme za brisanje u modal dialogu
    document.getElementById('confirmDeleteButton').addEventListener('click', deletePost);

    const currentUserId = '@Model.UserId'; // Dobijen sa servera
    const loggedInUserId = document.getElementById("loggedInUserId").value;

    function likePost(postId) {
        const button = document.querySelector(`#likeButton-${postId}`);
        const isLiked = button.classList.contains("liked");

        fetch(`/Like/LikePost`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                user: {
                    UserId: currentUserId,
                    ProfilePicture: ""
                }, // Zameniti sa stvarnim korisničkim ID
                post: { postId: postId }
            })
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`Server error: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Ažuriraj prikaz broja lajkova
                    button.classList.toggle("liked", data.isLiked); // Dodaj/ukloni klasu "liked"

                    const likeCountElement = document.querySelector(`#likeCount-${postId}`);
                    if (likeCountElement) {
                        likeCountElement.textContent = data.likeCount;
                    }

                } else {
                    alert("Failed to like post: " + (data.error || "Unknown error"));
                }
            })
            .catch(error => {
                console.error("Error liking post:", error.message);
            });
    }
    function unlikePost(postId) {
        fetch(`/Like/UnlikePost`, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                user: { UserId: currentUserId, ProfilePicture: "" },  // Zameniti sa stvarnim korisničkim ID
                post: { postId: postId }
            })
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`Server error: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Ažuriraj prikaz broja lajkova
                    const likeCountElement = document.querySelector(`#likeCount-${postId}`);
                    if (likeCountElement) {
                        likeCountElement.textContent = data.likeCount;
                    }

                    // Sakrij "Unlike" dugme, prikazi "Like" dugme
                    document.querySelector(`#likeButton-${postId}`).style.display = "inline-block";
                    document.querySelector(`#unlikeButton-${postId}`).style.display = "none";

                    alert("Post unliked successfully!");
                } else {
                    alert("Failed to unlike post: " + (data.error || "Unknown error"));
                }
            })
            .catch(error => {
                console.error("Error unliking post:", error.message);
            });
    }

    // Call to load posts when the page is loaded
    document.addEventListener("DOMContentLoaded", loadPosts);
</script>
<style>
    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .profile-img {
        width: 150px;
        height: 150px;
        object-fit: cover;
    }

    .posts-list, .friends-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .post-img {
        width: 100px;
        height: 100px;
        object-fit: cover;
    }

    .heart-button {
        background-color: transparent;
        border: none;
        font-size: 1.5rem;
        color: #ccc; /* Sivo za nelajkovano srce */
        cursor: pointer;
        transition: color 0.3s ease;
    }

        .heart-button.liked {
            color: #ff4757; /* Crveno za lajkovano srce */
        }

        .heart-button:hover {
            color: #ff6b81; /* Svetlije crveno kada se prelazi mišem */
        }

</style>
