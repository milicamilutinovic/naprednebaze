@model app.Models.User

@{
    ViewData["Title"] = "User Profile";
}

<div class="container-fluid d-flex flex-column vh-100">
    <!-- Header -->
    <header class="bg-primary text-white text-center py-3">
        <h1 class="display-5">User Profile</h1>
    </header>

    <!-- Main Content -->
    <main class="flex-grow-1 overflow-auto py-4">
        <div class="container profile-container">
            <div class="row">
                <!-- User Details Section -->
                <div class="col-12 col-lg-6 mb-4">
                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Username:</label>
                        <p class="form-control-plaintext">@Model.Username</p>
                    </div>

                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Full Name:</label>
                        <p class="form-control-plaintext">@Model.FullName</p>
                    </div>

                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Bio:</label>
                        <p class="form-control-plaintext">@Model.Bio</p>
                    </div>
                </div>

                <!-- Profile Picture Section -->
                <div class="col-12 col-lg-6 text-center mb-4">
                    <div class="profile-details">
                        <label class="form-label fw-bold">Profile Picture:</label>
                        @if (string.IsNullOrEmpty(Model.ProfilePicture))
                        {
                            <p class="form-control-plaintext">No profile picture available.</p>
                        }
                        else
                        {
                            <img src="@Model.ProfilePicture" alt="Profile Picture" class="img-thumbnail profile-img" />
                        }
                    </div>
                </div>
            </div>

            <!-- Buttons -->
            <div class="d-flex flex-wrap gap-2 justify-content-center mb-4">
                <form method="post" action="@Url.Action("Logout", "Account")">
                    <button type="submit" class="btn btn-danger">Logout</button>
                </form>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addFriendModal">Add Friend</button>
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addPostModal">Add Post</button>
            </div>

            <div class="row">
                <!-- Friends List -->
                <div class="col-12 col-md-6 mb-4">
                    <div class="friends-list">
                        <label class="form-label fw-bold">Friends:</label>
                        <ul class="list-group">
                            @foreach (var friend in Model.prijatelji ?? new List<User>())
                            {
                                <li class="list-group-item">@friend.FullName</li>
                            }
                        </ul>
                    </div>
                </div>

                <!-- Posts List -->
                <div class="col-12 col-md-6">
                    <div class="posts-list">
                        <label class="form-label fw-bold">Posts:</label>
                        <ul class="list-group" id="postList">
                            <!-- Posts will be dynamically loaded here -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-dark text-white text-center py-3 mt-auto">
        <p class="mb-0">&copy; 2025 User Profile Page</p>
    </footer>
</div>

<!-- Add Friend Modal -->
<div class="modal fade" id="addFriendModal" tabindex="-1" aria-labelledby="addFriendModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addFriendModalLabel">Search Users</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" id="searchBar" placeholder="Search Users" oninput="searchUsers()" autocomplete="off" />
                <ul class="list-group mt-2" id="userList" style="display: none;"></ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Post Modal -->
<div class="modal fade" id="addPostModal" tabindex="-1" aria-labelledby="addPostModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPostModalLabel">Add Post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" action="@Url.Action("AddPost", "PostController")" enctype="multipart/form-data" id="addPostForm" onsubmit="submitPost(event)">
                    <div class="mb-3">
                        <label for="image" class="form-label">Choose Image</label>
                        <input type="file" class="form-control" id="imageURL" name="imageURL" accept="image/*" required />
                    </div>
                    <div class="mb-3">
                        <label for="caption" class="form-label">Post Caption</label>
                        <textarea class="form-control" id="caption" name="caption" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Add Post</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Modal for updating a post -->
<div class="modal" tabindex="-1" id="updatePostModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updatePostForm">
                    <div class="mb-3">
                        <label for="updateCaption" class="form-label">Caption</label>
                        <input type="text" class="form-control" id="updateCaption" name="caption">
                    </div>
                    <div class="mb-3">
                        <label for="updateImage" class="form-label">Image URL</label>
                        <input type="text" class="form-control" id="updateImage" name="imageURL">
                    </div>
                    <button type="submit" class="btn btn-primary">Update Post</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Modal for delete confirmation -->
<div class="modal fade" id="deletePostModal" tabindex="-1" aria-labelledby="deletePostModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deletePostModalLabel">Delete Post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this post?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
            </div>
        </div>
    </div>
</div>


<script>
    async function searchUsers() {
        const query = document.getElementById("searchBar").value;

        // Ako nije unet nikakav tekst, sakrij padajući meni
        if (query.length === 0) {
            document.getElementById("userList").style.display = "none";
            return;
        }

        // Poziv na backend API
        const response = await fetch(`/User/SearchUsernames?query=${query}`);
        const usernames = await response.json();

        const userList = document.getElementById("userList");
        userList.innerHTML = '';  // Očisti prethodne rezultate

        // Ako ima korisničkih imena, prikaži padajući meni
        if (usernames.length > 0) {
            userList.style.display = "block";

            usernames.forEach(username => {
                const listItem = document.createElement("li");
                listItem.classList.add("list-group-item");
                listItem.textContent = username;

                // Dodaj funkcionalnost da klikom na ime dodate prijatelja
                listItem.addEventListener('click', () => {
                    document.getElementById("searchBar").value = username;
                    userList.style.display = "none";  // Sakrij padajući meni nakon selekcije
                });

                userList.appendChild(listItem);
            });
        } else {
            userList.style.display = "none";  // Sakrij ako nema rezultata
        }
    }
    function submitPost(event) {
        event.preventDefault(); // Prevent the default form behavior

        const form = document.getElementById("addPostForm");
        const formData = new FormData(form);

        fetch(form.action, {
            method: "POST",
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close the modal
                    const addPostModal = document.getElementById("addPostModal");
                    const modalInstance = bootstrap.Modal.getInstance(addPostModal);
                    modalInstance.hide();
                    loadPosts(); // Reload posts
                } else {
                    alert("Failed to add post: " + data.error);
                }
            })
            .catch(error => {
                console.error("Error submitting post:", error);
            });
    }

    function loadPosts() {
        const userId = '@Model.UserId';
        fetch(`/PostController/GetPosts?userId=${userId}`)
            .then(response => response.json())
            .then(posts => {
                const postList = document.getElementById("postList");
                postList.innerHTML = ''; // Clear the existing content

                if (posts.length === 0) {
                    postList.innerHTML = "<li class='list-group-item'>No posts available.</li>";
                }

                posts.forEach(post => {
                    console.log(post.postId); // Proverite vrednost postId

                    const listItem = document.createElement("li");
                    listItem.classList.add("list-group-item");
                    listItem.innerHTML = `
                            <strong>${post.caption}</strong><br/>
                            <img src="${post.imageURL}" alt="Post Image" class="img-thumbnail post-img" />
                            <div class="d-flex justify-content-between mt-2">
                                <button class="btn btn-warning btn-sm" onclick="updatePost('${post.postId}')">Update</button>
        <button class="btn btn-danger btn-sm" onclick="confirmDelete('${post.postId}')">Delete</button>
         <button class="btn btn-info btn-sm" onclick="likePost('${post.postId}')">Like</button>
        <button class="btn btn-danger btn-sm" id="unlikeButton-${post.postId}" onclick="unlikePost('${post.postId}')" style="display: none;">Unlike</button>

        <span id="likeCount-${post.postId}">${post.likeCount}</span> Likes     </div>
                        `;
                    postList.appendChild(listItem);
                });
            })
            .catch(error => {
                console.error("Error fetching posts:", error);
            });
    }

    function updatePost(postId) {
        // Dohvati podatke o postu sa servera
        fetch(`/PostController/${postId}`)
            .then(response => response.json())
            .then(post => {
                // Popunite modal sa postojećim podacima
                document.getElementById('updateCaption').value = post.caption;
                document.getElementById('updateImage').value = post.imageURL;

                // Prikazivanje modala
                const updatePostModal = new bootstrap.Modal(document.getElementById('updatePostModal'));
                updatePostModal.show();

                // Dodavanje event listener-a za submit forme
                document.getElementById('updatePostForm').onsubmit = function (event) {
                    submitUpdatePost(event, postId);
                };
            })
            .catch(error => {
                console.error("Error fetching post:", error);
            });
    }


    function submitUpdatePost(event, postId) {
        event.preventDefault(); // Sprečava podrazumevani submit forme

        const updatedPost = {
            caption: document.getElementById('updateCaption').value,
            imageURL: document.getElementById('updateImage').value
        };

        // Slanje PUT zahteva za ažuriranje postojećeg posta
        fetch(`/PostController/${postId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedPost)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Zatvori modal nakon uspešnog ažuriranja
                    const updatePostModalElement = document.getElementById('updatePostModal');

                    if (updatePostModalElement) {
                        // Ako element postoji, inicijalizuj modal
                        const updatePostModal = new bootstrap.Modal(updatePostModalElement);
                        updatePostModal.hide(); // Zatvori modal
                    } else {
                        console.error('Element sa ID-jem "updatePostModal" nije pronađen!');
                    }
                    loadPosts(); // Reload posts after update
                } else {
                    alert("Failed to update post: " + data.error);
                }
            })
            .catch(error => {
                console.error("Error updating post:", error);
                alert("An error occurred while updating the post.");
            });
    }

    let postToDelete = null; // Globalna varijabla za čuvanje ID-ja posta koji treba da se obriše

    // Funkcija koja prikazuje modal za potvrdu brisanja
    function confirmDelete(postId) {
        postToDelete = postId; // Zapamti ID posta koji treba obrisati
        const deletePostModal = new bootstrap.Modal(document.getElementById('deletePostModal'));
        deletePostModal.show(); // Prikazivanje modala
    }

    // Funkcija za brisanje posta
    function deletePost() {
        if (postToDelete !== null) {
            fetch(`/PostController/${postToDelete}`, { method: "DELETE" })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadPosts(); // Ponovo učitaj postove nakon brisanja
                        const deletePostModal = bootstrap.Modal.getInstance(document.getElementById('deletePostModal'));
                        deletePostModal.hide(); // Zatvori modal
                    } else {
                        alert("Failed to delete post: " + data.error);
                    }
                })
                .catch(error => {
                    console.error("Error deleting post:", error);
                });
        }
    }

    // Dodaj event listener na dugme za brisanje u modal dialogu
    document.getElementById('confirmDeleteButton').addEventListener('click', deletePost);

    const currentUserId = '@Model.UserId'; // Dobijen sa servera

    function likePost(postId) {
        fetch(`/Like/LikePost`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                user: { UserId: currentUserId,
                    ProfilePicture: ""  
                }, // Zameniti sa stvarnim korisničkim ID
                post: { postId: postId }
            })
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`Server error: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Ažuriraj prikaz broja lajkova
                    const likeCountElement = document.querySelector(`#likeCount-${postId}`);
                    if (likeCountElement) {
                        likeCountElement.textContent = data.likeCount;
                    }
                    alert("Post liked successfully!");
                } else {
                    alert("Failed to like post: " + (data.error || "Unknown error"));
                }
            })
            .catch(error => {
                console.error("Error liking post:", error.message);
            });
    }
    function unlikePost(postId) {
        fetch(`/Like/UnlikePost`, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                user: { UserId: currentUserId, ProfilePicture: "" },  // Zameniti sa stvarnim korisničkim ID
                post: { postId: postId }
            })
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`Server error: ${text}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Ažuriraj prikaz broja lajkova
                    const likeCountElement = document.querySelector(`#likeCount-${postId}`);
                    if (likeCountElement) {
                        likeCountElement.textContent = data.likeCount;
                    }

                    // Sakrij "Unlike" dugme, prikazi "Like" dugme
                    document.querySelector(`#likeButton-${postId}`).style.display = "inline-block";
                    document.querySelector(`#unlikeButton-${postId}`).style.display = "none";

                    alert("Post unliked successfully!");
                } else {
                    alert("Failed to unlike post: " + (data.error || "Unknown error"));
                }
            })
            .catch(error => {
                console.error("Error unliking post:", error.message);
            });
    }

    // Call to load posts when the page is loaded
    document.addEventListener("DOMContentLoaded", loadPosts);
</script>
<style>
    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .profile-img {
        width: 150px;
        height: 150px;
        object-fit: cover;
    }

    .posts-list, .friends-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .post-img {
        width: 100px;
        height: 100px;
        object-fit: cover;
    }
</style>
