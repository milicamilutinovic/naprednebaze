@model app.Models.User

@{
    ViewData["Title"] = "User Profile";
}

<div class="container-fluid d-flex flex-column vh-100">
    <!-- Header -->
    <header class="bg-primary text-white text-center py-3">
        <h1 class="display-5">User Profile</h1>
    </header>

    <!-- Main Content -->
    <main class="flex-grow-1 overflow-auto py-4">
        <div class="container profile-container">
            <div class="row">
                <!-- User Details Section -->
                <div class="col-12 col-lg-6 mb-4">
                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Username:</label>
                        <p class="form-control-plaintext">@Model.Username</p>
                    </div>

                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Full Name:</label>
                        <p class="form-control-plaintext">@Model.FullName</p>
                    </div>

                    <div class="profile-details mb-3">
                        <label class="form-label fw-bold">Bio:</label>
                        <p class="form-control-plaintext">@Model.Bio</p>
                    </div>
                </div>

                <!-- Profile Picture Section -->
                <div class="col-12 col-lg-6 text-center mb-4">
                    <div class="profile-details">
                        <label class="form-label fw-bold">Profile Picture:</label>
                        @if (string.IsNullOrEmpty(Model.ProfilePicture))
                        {
                            <p class="form-control-plaintext">No profile picture available.</p>
                        }
                        else
                        {
                            <img src="@Model.ProfilePicture" alt="Profile Picture" class="img-thumbnail profile-img" />
                        }
                    </div>
                </div>
            </div>

            <!-- Buttons -->
            <div class="d-flex flex-wrap gap-2 justify-content-center mb-4">
                <form method="post" action="@Url.Action("Logout", "Account")">
                    <button type="submit" class="btn btn-danger">Logout</button>
                </form>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addFriendModal">Add Friend</button>
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addPostModal">Add Post</button>
            </div>

            <div class="row">
                <!-- Friends List -->
                <div class="col-12 col-md-6 mb-4">
                    <div class="friends-list">
                        <label class="form-label fw-bold">Friends:</label>
                        <ul class="list-group">
                            @foreach (var friend in Model.prijatelji ?? new List<User>())
                            {
                                <li class="list-group-item">@friend.FullName</li>
                            }
                        </ul>
                    </div>
                </div>

                <!-- Posts List -->
                <div class="col-12 col-md-6">
                    <div class="posts-list">
                        <label class="form-label fw-bold">Posts:</label>
                        <ul class="list-group" id="postList">
                            <!-- Posts will be dynamically loaded here -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-dark text-white text-center py-3 mt-auto">
        <p class="mb-0">&copy; 2025 User Profile Page</p>
    </footer>
</div>

<!-- Add Friend Modal -->
<div class="modal fade" id="addFriendModal" tabindex="-1" aria-labelledby="addFriendModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addFriendModalLabel">Search Users</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" id="searchBar" placeholder="Search Users" />
                <ul class="list-group mt-2" id="userList"></ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Post Modal -->
<div class="modal fade" id="addPostModal" tabindex="-1" aria-labelledby="addPostModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPostModalLabel">Add Post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" action="@Url.Action("AddPost", "PostController")" enctype="multipart/form-data" id="addPostForm" onsubmit="submitPost(event)">
                    <div class="mb-3">
                        <label for="image" class="form-label">Choose Image</label>
                        <input type="file" class="form-control" id="imageURL" name="imageURL" accept="image/*" required />
                    </div>
                    <div class="mb-3">
                        <label for="caption" class="form-label">Post Caption</label>
                        <textarea class="form-control" id="caption" name="caption" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Add Post</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function submitPost(event) {
        event.preventDefault(); // Prevent the default form behavior

        const form = document.getElementById("addPostForm");
        const formData = new FormData(form);

        fetch(form.action, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Close the modal
                const addPostModal = document.getElementById("addPostModal");
                const modalInstance = bootstrap.Modal.getInstance(addPostModal);
                modalInstance.hide();
                loadPosts(); // Reload posts
            } else {
                alert("Failed to add post: " + data.error);
            }
        })
        .catch(error => {
            console.error("Error submitting post:", error);
        });
    }

    function loadPosts() {
        const userId = '@Model.UserId';
        fetch(`/PostController/GetPosts?userId=${userId}`)
            .then(response => response.json())
            .then(posts => {
                const postList = document.getElementById("postList");
                postList.innerHTML = ''; // Clear the existing content

                if (posts.length === 0) {
                    postList.innerHTML = "<li class='list-group-item'>No posts available.</li>";
                }

                posts.forEach(post => {
                    const listItem = document.createElement("li");
                    listItem.classList.add("list-group-item");
                    listItem.innerHTML = `
                        <strong>${post.caption}</strong><br/>
                        <img src="${post.imageURL}" alt="Post Image" class="img-thumbnail post-img" />
                        <div class="d-flex justify-content-between mt-2">
                            <button class="btn btn-warning btn-sm" onclick="updatePost('${post.postId}')">Update</button>
                            <button class="btn btn-danger btn-sm" onclick="deletePost('${post.postId}')">Delete</button>
                            <button class="btn btn-info btn-sm" onclick="likePost('${post.postId}')">Like</button>
                        </div>
                    `;
                    postList.appendChild(listItem);
                });
            })
            .catch(error => {
                console.error("Error fetching posts:", error);
            });
    }

    function updatePost(postId) {
        // Logic for updating the post (show an update modal or handle the update via API)
        alert(`Update post with ID: ${postId}`);
    }

    function deletePost(postId) {
        // Confirm and delete the post
        if (confirm("Are you sure you want to delete this post?")) {
            fetch(`/PostController/DeletePost?postId=${postId}`, { method: "DELETE" })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadPosts(); // Reload posts after deletion
                    } else {
                        alert("Failed to delete post: " + data.error);
                    }
                })
                .catch(error => {
                    console.error("Error deleting post:", error);
                });
        }
    }

    function likePost(postId) {
        // Logic for liking the post
        fetch(`/LikeController/LikePost?postId=${postId}`, { method: "POST" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Post liked successfully!");
                    loadPosts(); // Reload posts to reflect updated like count
                } else {
                    alert("Failed to like post: " + data.error);
                }
            })
            .catch(error => {
                console.error("Error liking post:", error);
            });
    }

    // Call to load posts when the page is loaded
    document.addEventListener("DOMContentLoaded", loadPosts);
</script>
<style>
    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .profile-img {
        width: 150px;
        height: 150px;
        object-fit: cover;
    }

    .posts-list, .friends-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .post-img {
        width: 100px;
        height: 100px;
        object-fit: cover;
    }
</style>
